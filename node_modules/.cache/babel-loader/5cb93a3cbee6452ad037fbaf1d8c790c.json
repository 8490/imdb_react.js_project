{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/user/Dokumente/React/imdb_project/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Pagination } from \"@material-ui/lab\"; // Components\n\nimport { Card } from \"./components/Card\";\nimport { VideoSection } from './components/VideoSection';\nimport { SearchBar } from './components/SearchBar'; // Style Component\n\nimport { CardWrapper, StyledPagination } from './App.style';\nconst apiKey = \"d161df73b66b9d1b527d3526c891aeca\"; //temporary\n\nconst baseUrl = \"https://api.themoviedb.org/3/search/movie\";\n\nfunction App(props) {\n  _s();\n\n  const [movieData, setMovieData] = useState(null);\n  const [copyMovieData, setCopyMovieData] = useState(null);\n  const [inputData, setInputData] = useState('live'); // const [countPage, setCountPage] = useState(1)\n\n  const [page, setPage] = React.useState(1);\n\n  const handleChange = (state, value) => {\n    setPage(value);\n  };\n\n  useEffect(() => {\n    axios.get(baseUrl, {\n      params: {\n        api_key: apiKey,\n        query: inputData,\n        page: page\n      }\n    }).then(res => {\n      setMovieData(res.data.results);\n      console.log(res); // console.log(res.data.length);\n    });\n  }, [inputData, page]);\n  useEffect(() => {\n    axios.get(baseUrl, {\n      params: {\n        api_key: apiKey,\n        query: inputData,\n        page: page + 1\n      }\n    }).then(res => {\n      setCopyMovieData(res.data.results);\n\n      if ((copyMovieData === null || copyMovieData === void 0 ? void 0 : copyMovieData.length) == 0) {\n        setPage(1);\n      }\n\n      ;\n    });\n  }, [inputData, page]);\n\n  function ChangeSetInputData(e) {\n    setPage(1);\n    setInputData(e.target.value);\n  }\n\n  function PageCount() {\n    for (let i = 1; i = 10; i++) {\n      if ((copyMovieData === null || copyMovieData === void 0 ? void 0 : copyMovieData.length) == 0) {}\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(VideoSection, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      onChange: ChangeSetInputData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledPagination, {\n      children: /*#__PURE__*/_jsxDEV(Pagination, {\n        variant: \"outlined\",\n        count: PageCount,\n        page: page,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardWrapper, {\n      children: movieData === null || movieData === void 0 ? void 0 : movieData.map((movie, index) => {\n        return /*#__PURE__*/_jsxDEV(Card, {\n          title: movie.title,\n          poster_path: movie.poster_path ? `https://image.tmdb.org/t/p/w500${movie.poster_path}` : \"https://upload.wikimedia.org/wikipedia/en/f/f9/No-image-available.jpg\",\n          overview: movie.overview,\n          release_date: movie.release_date,\n          vote_average: movie.vote_average\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 20\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"B2ECwLrgoaVGYW3H+TZBhIXuJ3I=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/user/Dokumente/React/imdb_project/src/App.js"],"names":["React","useState","useEffect","axios","Pagination","Card","VideoSection","SearchBar","CardWrapper","StyledPagination","apiKey","baseUrl","App","props","movieData","setMovieData","copyMovieData","setCopyMovieData","inputData","setInputData","page","setPage","handleChange","state","value","get","params","api_key","query","then","res","data","results","console","log","length","ChangeSetInputData","e","target","PageCount","i","map","movie","index","title","poster_path","overview","release_date","vote_average"],"mappings":"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","sourcesContent":["\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Pagination } from \"@material-ui/lab\";\n\n// Components\nimport { Card } from \"./components/Card\";\nimport { VideoSection } from './components/VideoSection';\nimport { SearchBar } from './components/SearchBar';\n\n// Style Component\nimport { CardWrapper, StyledPagination } from './App.style'\n\nconst apiKey = \"d161df73b66b9d1b527d3526c891aeca\"; //temporary\nconst baseUrl = \"https://api.themoviedb.org/3/search/movie\";\n\n\nfunction App(props) {\n  const [movieData, setMovieData] = useState(null);\n  const [copyMovieData, setCopyMovieData] = useState(null);\n  const [inputData, setInputData] = useState('live')\n  // const [countPage, setCountPage] = useState(1)\n  const [page, setPage] = React.useState(1);\n\n\n  const handleChange = (state, value) => {\n    setPage(value);\n  };\n\n  useEffect(() => {\n    axios.get(baseUrl, {\n      params: {\n        api_key: apiKey,\n        query: inputData,\n        page: page,\n      }\n    })\n      .then((res) =>  {\n        setMovieData(res.data.results);\n        console.log(res);\n        // console.log(res.data.length);\n      })\n  }, [inputData, page])\n\n  useEffect(() => {\n    axios.get(baseUrl, {\n      params: {\n        api_key: apiKey,\n        query: inputData,\n        page: page +1 ,\n      }\n    })\n      .then((res) => { \n        setCopyMovieData(res.data.results);\n        if (copyMovieData?.length==0) {\n          setPage(1)\n\n        };\n          })\n  }, [inputData, page])\n\n  function ChangeSetInputData(e) {\n    setPage(1)\n    setInputData(e.target.value)\n  }\n\n  function PageCount() {\n    for (let i = 1; i = 10; i++) {\n      if (copyMovieData?.length==0) {\n        \n      }\n    }\n  }\n\n  return (\n    <>\n      <VideoSection />\n      <SearchBar onChange={ChangeSetInputData} />\n      <StyledPagination>\n        <Pagination\n          variant=\"outlined\"\n          count={PageCount}\n          page={page}\n          onChange={handleChange}\n          />\n      </StyledPagination>\n      <CardWrapper>\n        {movieData?.map(\n          (movie, index) => {\n            return <Card\n              key={index}\n              title={movie.title}\n              poster_path={\n                movie.poster_path ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n                  : \"https://upload.wikimedia.org/wikipedia/en/f/f9/No-image-available.jpg\"}\n              overview={movie.overview}\n              release_date={movie.release_date}\n              vote_average={movie.vote_average} />\n          })\n        }\n      </CardWrapper>\n\n    </>\n\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}